"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
function parse(text) {
    if (typeof text !== 'string')
        return null;
    if (text === '')
        return null;
    var lines = text.split('\n');
    var rootNode = {
        name: '',
        properties: [],
        subnodes: [],
    };
    var currentNode = rootNode;
    var path = [currentNode];
    var state = 0 /* expectingNodeOrClose */;
    for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
        var line = lines_1[_i];
        line = line.trim();
        // Empty Line
        if (line.length === 0)
            continue;
        // Comment Line
        if (line[0] === ';')
            continue;
        // Depending on State (expecting sub-node or node close, expecting propertie list continuation-if line ends with a comma)
        if (state === 0 /* expectingNodeOrClose */) {
            // Node Close
            if (line[0] === '}') {
                // Can't close when in root node
                if (path.length === 1)
                    throw Error();
                path.pop();
                currentNode = path[path.length - 1];
            }
            else {
                // find colon after the the node name
                var firstCol = line.indexOf(':');
                var nodeName = line.substring(0, firstCol);
                nodeName = nodeName.trim();
                // check end of line
                var expectingSubnodes = line[line.length - 1] === '{';
                var propertieString = line.substring(firstCol + 1, line.length - (expectingSubnodes ? 1 : 0));
                var propertieStringList = propertieString.split(',');
                var properties = [];
                for (var _a = 0, propertieStringList_1 = propertieStringList; _a < propertieStringList_1.length; _a++) {
                    var propertieString_1 = propertieStringList_1[_a];
                    var trimmed = propertieString_1.trim();
                    if (trimmed === '')
                        continue;
                    properties.push(trimmed);
                }
                if (propertieStringList[propertieStringList.length - 1] === '')
                    state = 1 /* expectingPropertieListContinuation */;
                var newNode = {
                    name: nodeName,
                    properties: properties,
                    subnodes: [],
                };
                currentNode.subnodes.push(newNode);
                if (expectingSubnodes || state === 1 /* expectingPropertieListContinuation */) {
                    path.push(newNode);
                    currentNode = newNode;
                }
            }
        }
        else if (state === 1 /* expectingPropertieListContinuation */) {
            // check end of line
            var expectingSubnodes = line[line.length - 1] === '{';
            var propertieString = line.substring(0, line.length - (expectingSubnodes ? 1 : 0));
            var propertieStringList = propertieString.split(',');
            var properties = [];
            for (var _b = 0, propertieStringList_2 = propertieStringList; _b < propertieStringList_2.length; _b++) {
                var propertieString_2 = propertieStringList_2[_b];
                var trimmed = propertieString_2.trim();
                if (trimmed === '')
                    continue;
                properties.push(trimmed);
            }
            currentNode.properties = currentNode.properties.concat(properties);
            if (propertieStringList[propertieStringList.length - 1] !== '')
                state = 0 /* expectingNodeOrClose */;
            if (!expectingSubnodes && state === 0 /* expectingNodeOrClose */) {
                path.pop();
                currentNode = path[path.length - 1];
            }
        }
    }
    return rootNode;
}
exports.parse = parse;
